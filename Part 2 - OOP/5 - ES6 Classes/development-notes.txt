Section - ES6 Classes:
----------------------
Lecture 1 - ES6 Classes:
------------------------
Over the last few sections we learned about Objects & prototypical inheritance.
Since ES6 there are much better ways to achieve the same result using some Syntactic sugar.



Lecture 5 - Private Members Using Symbols:
------------------------------------------
So in previous lectures we said abstraction is one of the core concepts of OO programming.
IF abstraction is hiding the implmentation detail, how do we do that using ES6?

There are several approaches to make variables & methods private.

Method 1 - Using underscore Convention:
The worst approach by far is using an underscore to let consumers know this variable
is meant to be private. It does not stop them from using anything, just a suggestion.

class Circle {
  constructor(radius) {
    this._radius = radius; //Should let consumers know this is 'Private'.
  }
}


Method 2 - Using Symbols:
Symbols in ES6 are a way to create random values, which we can use as variable names.
Using this and the bracket notation, we can make a value inaccessible.

const _radius = Symbol();

class Circle {
  constructor(radius) {
    this[_symbol] = radius; //Should let consumers know this is 'Private'.
  }
}

Does this work?
Well Yes and No.
Simply put, we cannot access c._radius anymore, but there may be a way to hack it.

Hacking into our values...
const c = new Circle(2);
const key = Object.getOwnPropertySymbols(c)[0];
console.log("accesing your private value - ", c[key]);


Making a Function Private:
Same again, if we define a function name as a symbol, we can then use computed getOwnPropertySymbols
names. The expression will be evaluated @ runtime, and assigned as the name of our method.

const _draw = Symbol();

class Circle {
  constructor(radius) {
    this[_radius] = radius;
  }
  //computed property name
  [_draw]() {}
}



Lecture 6 - Private Members Using WeakMaps:
-------------------------------------------
So carrying on from before we're going to use the 3rd method of creating private members,
the WeakMap. WeakMaps are basically a dictionary where keys are objects, 
and values anything (values or functions).

note
Weak maps are so called because the keys are weak, if there are no references to these keys
it will be garbage collected @ runtime.


Step 1 - Decare WeakMaps:
const _radius = new WeakMap(); 
const _move = new WeakMap();


Step 2 - Set WeakMaps using THIS & the variable/method.
class Circle {
  constructor(radius) {
    _radius.set(this, radius);
    _move.set(this, () => {
      console.log("move", this);
    });
  }
  Step 3 - Use Private Variable or Function:
  draw() {
    _move.get(this)(); //call private function
    console.log(_radius.get(this));
  }
}

Test - Check we cannot access the variables externally:
const c = new Circle(2);
c.draw();





But we can still access the WeakMap?
Yes for now, but in an upcoming lecture we're going to go over modules.
And there it will make sense


But How can we access This?
The arrow function passes a reference to the THIS object its currently inside.
    _move.set(this, function () {
      console.log("move", this);
    });

becomes
    _move.set(this, () => {
      console.log("move", this);
    });

Why not use a single WeakMap for all properties:
-Create WeakMap
const _privateProperties = new WeakMap();

-Set Values
  constructor(radius) {
    _privateProperties.set(this, {
      radius: radius,
      move: () => {},
    });


-Get Values
  draw() {
    console.log(
      "accessing private properties - ",
      _privateProperties.get(this).radius
    );
  }

Which is better? Individual WeakMaps or combined?
Up to personal preference, if you dislike the _privateProperties.get(this).radius
method for accessing Individual values, favour single use WeakMaps.

Take home - WeakMaps & upcoming modules are the best way to hide our private members.