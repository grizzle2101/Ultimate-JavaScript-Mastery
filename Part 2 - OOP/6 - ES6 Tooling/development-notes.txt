Section - ES6 Tooling:
----------------------
Lecture 1 - Modules:
----------------------
Eveerything we've done so far has been inside a the index.js file, we're going to look
at building modules using ES6.

file = modules

Benefits of Modules:
-maintainability
-reuse
-abstract


So lets get migrate our Circle class into a module. Remember in the previous lectures
we used a weak map to simulate private properties? Now if we place this in a module,
the weakmap will not be available, so we're finishing off securing our properties.

In ES5 there was no concept of Modules, so some developers came up with some different
ways to mock this using different module formats like.

-AMD - Asynchoronous Module Definition (Browsers)
-CommonJS - NodeJs
-UMD - Universal Module Deinition (browser & node)
-ES6 - Browsers

In the next sections, we're going to look at CommonJS and ES6 Modules, so we don't have
to worry about AMD or UMD, unless your working on some legacy codebase.


Lecture 2 - CommonJs:
---------------------
So in this lecture, we're going to go over the CommonJS module format used in node.


1 - Run terminal in the starting_point folder and type node index.js


note:
A note when designing modules, Things that are highly related should go together.
We want to achieve cohesion and consistency.

2 - Create a Circle.js file and place the circle weakmap & class.

another note:
everything we put in a module is private, unless we explicitly export it.


3 - export:
so in CommonJS we use the module.exports object, and assign it to the value we wish
to export aka the Circle.

module.exports = Circle; 


4 - Import Module:
Again using the CommonJS approach, we use require('./circle') in our index.js.


5 - Run Code:
Because we're using Common.JS, we need to run this via node to get the same message.
node index.js

Take Home:
In Common.JS we use module.exports & require to import & export modules.



Lecture 3 - ES6 Modules:
------------------------
So much like the previous tutorial we want to extract the circle to a new
file, and only expose the public members.

1 - Export class
2 - Import class

note:
We run into some errors when we run this, 'Cannot use import statement outside
a module'.
Because we're not using webpack to build the files correctly for us, we have
to do a small workaround.

-adding type = module to index.html - we tell chrome treat our js as a module.
<script type="module" src="index.js"></script>

-Specify JS file extension.
import { Circle } from "./circle.js";

Take Home:
Webpack or any build tool will automate the imports for us, but in general
it as simple as make a class exportable, then import module for consumption.



Lecture 4 - ES6 Tooling:
------------------------
When building applications for the browser, there are some key tools to understand.
-transpiler
-bundler


-transpiler - translator & compiler:
We give is modern ES6 JavaScript code, and a tool like babel will transform
it to ES5, ES4 and so on.

-bundler - will help us bundle all our JavaScript into a single file.
The most popular being webpack. It will remove all whitespace, minify and uglify(shorten names)
as well as combine it into a single file for us.



Lecture 5 - Babel:
------------------


1 - create directory

2 - initialize NPM project
npm init --yes

3 - install babel
npm install i babel-cli@6.26.0 babel-core@6.26.0 babel-preset-env@1.6.1 --save-dev

cli - just provides some useful tools for us.
core - is the core bable executeable, needed to do the job.
preset env - combines all the preset features and packages for ES6.

4 - Create some basic code to be transpiled.
const x = 1;

5 - Update package.json with babel command. & create build directory.
  "scripts": {
   "babel":"babel --presents env index.js -o build/index.js"
  },


6 - Use NPM RUN babel to compile code.
npm run babel

7 - review compiled code.
const x = 1;


note:
In our current implementation, we can see we're only building index.js. In a more complicated app we
will be building hundreds of classes, this is where something webpack comes into play.