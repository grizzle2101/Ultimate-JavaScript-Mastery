Section - ES6 Tooling:
----------------------
Lecture 1 - Modules:
----------------------
Eveerything we've done so far has been inside a the index.js file, we're going to look
at building modules using ES6.

file = modules

Benefits of Modules:
-maintainability
-reuse
-abstract


So lets get migrate our Circle class into a module. Remember in the previous lectures
we used a weak map to simulate private properties? Now if we place this in a module,
the weakmap will not be available, so we're finishing off securing our properties.

In ES5 there was no concept of Modules, so some developers came up with some different
ways to mock this using different module formats like.

-AMD - Asynchoronous Module Definition (Browsers)
-CommonJS - NodeJs
-UMD - Universal Module Deinition (browser & node)
-ES6 - Browsers

In the next sections, we're going to look at CommonJS and ES6 Modules, so we don't have
to worry about AMD or UMD, unless your working on some legacy codebase.


Lecture 2 - CommonJs:
---------------------
So in this lecture, we're going to go over the CommonJS module format used in node.


1 - Run terminal in the starting_point folder and type node index.js


note:
A note when designing modules, Things that are highly related should go together.
We want to achieve cohesion and consistency.

2 - Create a Circle.js file and place the circle weakmap & class.

another note:
everything we put in a module is private, unless we explicitly export it.


3 - export:
so in CommonJS we use the module.exports object, and assign it to the value we wish
to export aka the Circle.

module.exports = Circle; 


4 - Import Module:
Again using the CommonJS approach, we use require('./circle') in our index.js.


5 - Run Code:
Because we're using Common.JS, we need to run this via node to get the same message.
node index.js

Take Home:
In Common.JS we use module.exports & require to import & export modules.