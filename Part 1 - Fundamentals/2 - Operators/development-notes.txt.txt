
Lecture 1 - JavaScript operators:
We use operators in conjunction with variables to create expression, and we use these
expressions to implement logic and alghoritms.

operators variables > expressions > alghoritms

Types of Operators:
-arthmetic
-assignment
-comparison
-logical
-bitwise


Lecture 2 - arthmetic operators:

note:
When incrementing or decrementing values, pay close attention to where they're placed.
x++ means increment AFTER the value is displayed.
++x means increment BEFORE displaying the value.

Lecture 5 - Equality Operator:

the == VS === debate:
Strict V loose equality.
console.log(1 === '1'); false
console.log(1 == '1'); true

The main point being with loose equality, JavaScript automatically converts both
values to the type of the first value. So 1 to '1' both convert to 1, and the comparison works.
However some edge cases can result like
true == 1, returns true. We convert the 1 a boolean with the value of true, which obviously
makes no sense to us, 1 and true and NOT the same.

*Strict Equality is MUCH more precise and accurate*


Lecture 8 - Logical Operators with Non-booleans:
Consider the following scenarios...

console.log(false || true); //true
console.log(false || 'Mosh'); //returns Mosh
console.log(false || 1); //returns 1

In summary Logical operators do NOT always return true/false.
The JavaScript engine tries to interpret our operands as 'truthy' or 'falsey'.

//Falsey
Falsey is like false but usually appears as undefined, null, 0, false, ''
or Nan - not a Number.
Anything that is not Falsey is truthy.

Truthy Scenario:
with the || operator we know one condition must be true, the first is false so the engine
moved to the operate on either True or Truthy, in this case its truthy so we return
the string 'Mosh'
console.log(false || 'Mosh');


Short Circuit Scenaio:
Consider this scenrio where we have 3 values, the first is false the second is truthy.
The engine returns 1, even tho one of these conditions should evaludate to true.
In realty the engine stops at the first truthy value, and doesn't take into account
anything afterwards.
console.log(false || 1 || 2); // As soon as we find truthy value, return it.

When to use this?
There are scenarios like say we want the user the select a color. But if one is not
selected, we default to blue.
let userColor = undefined;
let defaultColor = 'blue';
let currentColor = userColor || defaultColor;

console.log(currentColor); //value is blue

IE. undefined/falsey || 'blue' returns blue.



Lecture 9 - Bitwise Operators:
The discussion about bitwise operators can tend to get overly technical, and we don't
want to spend more time discussing than actually using these operators.
They do have their use, but it is limited.

We as humans store numbers in the decimal system, ie 1, 2 & 3. But computers store
as bits aka 1s and 0s.
1 = 00000001 - 8 bits, 1 byte
2 = 00000010
There is some math that goes into calculating this, but there is always decimal to binary
calculators online.

Bitwise operators work on the individual bits of a number.
console.log(1 | 2); //bitwise OR
This will evalate 1 & 2, and return 1 where its found.
the returned result is
3 = 00000011